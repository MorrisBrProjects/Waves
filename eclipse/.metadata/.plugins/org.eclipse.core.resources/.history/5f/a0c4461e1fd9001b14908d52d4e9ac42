package de.morrisbr.waves.utils.aplication;

import de.morrisbr.waves.client.main.Display;
import de.morrisbr.waves.utils.AssetsLoader;
import de.morrisbr.waves.utils.drawutil.Drawer;

import javax.swing.*;
import java.awt.*;

public class Application {

    private boolean running = false;
    private final double UPDATE_CAP = 1.0 / 60.0;
    private int debugFPS;
    private Drawer drawer;
    private JFrame frame;
    private AssetsLoader assetsLoader;

    public Application() {
        this.onApplicationInit();
    }

    public void start() {
        this.onStart();
        this.running = true;
        this.drawer = new Drawer(frame);
        System.out.println("Waves: Game has Started...");
        startGameLoop();
    }

    public void stop() {
        this.onStop();
        System.out.println("[INFO]: Game is shutting down ... !");
        frame.dispose();
        System.exit(0);
    }

    public void onGameLoopInit(){}
    public void onApplicationInit(){
        this.assetsLoader = new AssetsLoader();
    }
    public void onStart(){}
    public void onStop(){}

    public void onUpdate(float updateCap) {}
    public void onRender(Graphics2D graphics) {}


    private void startGameLoop() {
            boolean render = false;
            double firstTime = 0;
            double lastTime = System.nanoTime() / 1000000000.0;
            double passedTime = 0;
            double unprocessedTime = 0;

            double frameTime = 0;
            int frames = 0;
            //int fps = 0;

            //init before update
            //startGame();
            this.onGameLoopInit();

            while (running) {
                render = true;

                firstTime = System.nanoTime() / 1000000000.0;
                passedTime = firstTime - lastTime;
                lastTime = firstTime;

                unprocessedTime += passedTime;
                frameTime += passedTime;

                while (unprocessedTime >= UPDATE_CAP) {
                    unprocessedTime -= UPDATE_CAP;
                    render = true;

                    //update
                    this.onUpdate((float) UPDATE_CAP);
                    //System.out.println("gfhgfjhjhgj");
                    //System.out.println(UPDATE_CAP);

                    if (frameTime >= 1.0) {
                        frameTime = 0;
                        this.debugFPS = frames;
                        System.out.println(debugFPS);
                        frames = 0;
                    }
                }

                if (render) {

                    //render
                    this.onRender(drawer.getGraphics());
                    frames++;
                } else {
                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
    }
    
    
    /**
     * 
     * get the Drawer
     * 
     * @return Drawer
     **/
    
    public Drawer getDrawer() {
        return drawer;
    }
    
    
    /**
     * 
     * get delta
     * 
     * @return UPDATE_CAP
     */

    public double getDelta() {
        return UPDATE_CAP;
    }

    public void setFrame(JFrame frame) {
        this.frame = frame;
    }

    public AssetsLoader getAssetsLoader() {
        return assetsLoader;
    }


}
